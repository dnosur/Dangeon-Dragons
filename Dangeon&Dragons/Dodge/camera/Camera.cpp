#include "Camera.h"

#include "../functions.h"

#include "../Material.h"


Camera::Camera(std::string title, Size cameraSize, Size mapSize)
    : size(cameraSize), mapSize(mapSize), observed(nullptr), title(title), oldPos(Coord(0, 0))
{
}

void Camera::UpdateCamera()
{
    if (!observed) return;

    // üîπ –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞
    Coord playerPosition = observed->GetPos();

    // üîπ –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–≥—Ä–æ–∫–∞
    double playerWidth = observed->GetSize().GetWidth();
    double playerHeight = observed->GetSize().GetHeight();

    // üîπ –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—Ç—Ä –∏–≥—Ä–æ–∫–∞ (—Å–º–µ—Å—Ç–∏–º –ø–æ–∑–∏—Ü–∏—é –≤ —Ü–µ–Ω—Ç—Ä –µ–≥–æ —Å–ø—Ä–∞–π—Ç–∞)
    double centeredX = playerPosition.X + playerWidth / 2.0;
    double centeredY = playerPosition.Y + playerHeight / 2.0 + Window::GetRenderResolution().GetHeight();

    // üîπ –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞–º–µ—Ä—É –Ω–∞ —Ü–µ–Ω—Ç—Ä–µ –∏–≥—Ä–æ–∫–∞
    position = Coord(centeredX - size.width / 2.0, centeredY - size.height / 2.0);

    // üîπ –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã, —á—Ç–æ–±—ã –∫–∞–º–µ—Ä–∞ –Ω–µ –≤—ã—Ö–æ–¥–∏–ª–∞ –∑–∞ –∫–∞—Ä—Ç—É
    position.X = Window::PixelToGLX(Min<double>(position.X, mapSize.width - size.width));
    position.Y = Window::PixelToGLY(Min<double>(position.Y, mapSize.height - size.height));

    oldPos = playerPosition;

    std::cout << "Player pos: " << playerPosition.X << ", " << playerPosition.Y << std::endl;
    std::cout << "Camera pos GL: " << position.X << ", " << position.Y << std::endl;
}


void Camera::Update()
{
    if (oldPos != observed->GetPos()) {
        UpdateCamera();
    }
}

glm::mat4 Camera::GetViewMatrix() const
{
    return glm::translate(glm::mat4(1.0f), glm::vec3(-position.X, -position.Y, 0.0f));
}

glm::mat4 Camera::GetProjectionMatrix() const {
    float left = 0.0f;
    float right = static_cast<float>(size.width);
    float bottom = static_cast<float>(size.height);
    float top = 0.0f;

    // –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–∏–∫—Å–µ–ª–∏ –≤ OpenGL-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç -1 –¥–æ 1
    float scaleX = 2.0f / (right - left);
    float scaleY = 2.0f / (bottom - top);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫—É—é –ø—Ä–æ–µ–∫—Ü–∏—é, –Ω–æ —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π –≤ OpenGL –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    glm::mat4 projection = glm::ortho(left * scaleX, right * scaleX, top * scaleY, bottom * scaleY, -1.0f, 1.0f);

    return projection;
}

Coord Camera::GetPosition() const
{
    return position;
}

void Camera::SetObservedObj(std::shared_ptr<IGameObject> obj)
{
    observed = obj;
    position = observed->GetPos();
}

const Coord& Camera::GetOldObservedPos()
{
    return oldPos;
}

std::weak_ptr<IGameObject> Camera::GetObservedObj()
{
    return observed;
}